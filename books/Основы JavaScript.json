{
	"name": "Основы JavaScript",
	"textBook": [
		{
			"abzac": "Что такое JavaScript",
			"textAbzac": "JavaScript - это язык программирования. Он используется для вставки в html-код страниц и выполняется в браузере. То есть даже если пользователь отключится от интернета, то уже закруженный сценарий JavaScript будет выполняться.\n\nПри помощи JavaScript делают:\n\n - Динамические слайд-шоу на страницах.\n - Можно сделать любые динамические эффекты с картинками, текстом, блоком.\n - Проверку форм перед отправкой их на сервер.\n - Многое другое."
		},
		{
			"abzac": "Логические операторы",
			"textAbzac": "огические операторы, как правило, используются с булевым типом данных и возвращают логическое значение (истина или ложь).\n\nКак правило..., на самом деле эти операторы и называются «логическими», но в JavaScript могут оперировать значениями любого типа и возвращать также значения любого типа.\n\n&& - логическое И\nС логическим И на первый взгляд всё просто, если оба операнда истины, то выражение истинно:\n\nif (true && true) document.write(\"Это работает!<br>\");\nЭтот пример можно немного усложнить и записать операндами выражения сравнения.\n\nif (5>1 && 2<9) document.write(\"Значение if: \"+ (5>1 && 2<9) +\"<br>\");\nНо на самом деле всё не так просто. В данном примере мы использовали операторы сравнения, они возвращают логические значения true / false. Но операндами логического И могут быть выражения с арифметическими операторами.\n\nДавайте изменим пример:\n\nif (5+1 && 2+9) document.write(\"Значение if: \"+ (5+1 && 2+9) +\"<br>\");\nВ этом примере оператор && вернёт 11. Дело в том, что на самом деле оператор && возвращает последний операнд, если все операнды истинны.\n\nЕсли хоть один из операндов равен лжи, то && возвратит первый операнд со значением ложь.\n\ndocument.write(\"Оба операнда false: \"+ (5-5 && 1>8) +\"<br>\");\n\nВ этом примере оператор && вернёт цифру 0. Можно, для более глубокого понимания, усложнить пример.\n\ndocument.write(\"Три операнда false: \"+ (5-5 && 1>8 && false) +\"<br>\");"
		},
		{
			"abzac": "Что есть ложь в JavaScript",
			"textAbzac": "Сейчас хороший повод повторить что есть ложь в JavaScript.\n\n-Число 0 (ноль).\n-Пустая строка \"\".\n-Логическое значение false :)\n-Значение null.\n-Значение undefined.\n-Значение NaN (Not a Number - не число).\nВсё остальное в логическом контексте будет истиной."
		},
		{
			"abzac": "|| - логическое ИЛИ",
			"textAbzac": "Оператор логического ИЛИ возвращает первое значение true (истина). А если истинных значений нет, то последнее ложное.\n\ndocument.write(\"Три операнда false: \"+ (5-5 || 1>8 || false) +\"<br>\");\ndocument.write(\"Другой пример: \"+ (5-5 || 9+8 || true) +\"<br>\");\nЛогические выражения вычисляются слево направо. Как только оператор ИЛИ обнаружит значение true - он вернёт его, далее вычеслений не будет. Если не встретит ни одно значение true, то вернёт последнее значение, а оно точно будет false. Мы видим, ИЛИ вычисляет ровно столько значений, сколько необходимо.\n\nvar myVar = 10;\ntrue || ++myVar;\t// Код ++myVar не будет выполнен.\ndocument.write(\"Переменная myVar: \"+ myVar +\"<br>\");\nvar myVar2 = 20;\nfalse || ++myVar2;\ndocument.write(\"Переменная myVar2: \"+ myVar2 +\"<br>\");"
		},
		{
			"abzac": "! - логическое НЕ",
			"textAbzac": "Логическое НЕ - унарный оператор. Он принимает операнд и изменяет его значение истина/ложь на противоположное.\n\ndocument.write(\"Пример 1: \"+ !false +\"<br>\");\ndocument.write(\"Пример 2: \"+ !(5-5) +\"<br>\");\ndocument.write(\"Пример 3: \"+ !\"строка\" +\"<br>\");\nТакже становится очевидно, при помощи двойного логического НЕ мы можем преобразовать литерал в тип Boolean.\n\nvar str = \"Строка.\"\n// две эквивалентные записи\ndocument.write(\"Boolean тип переменной str: \"+ !!str +\".<br>\");\ndocument.write(\"Boolean тип переменной str: \"+ Boolean(str) +\".<br>\");"
		},
		{
			"abzac": "Короткий цикл вычислений",
			"textAbzac": ""
		},
		{
			"abzac": "Оператор || (ИЛИ)",
			"textAbzac": ""
		},
		{
			"abzac": "Оператор || (ИЛИ)",
			"textAbzac": "Итак, логические выражения вычисляются слево направо. Например, когда оператор ИЛИ обнаружит значение true - он вернёт его, далее вычеслений не будет. Эту особенность можно использовать для поиска первого истинного выражения в списке.\n\nvar myVar = 0;\nvar myBool = false;\nvar myStr = \"\";\nvar myMsg = \"Привет!\";\nvar result = (myVar || myVar++ || myBool || myStr || myMsg || ++myVar);\ndocument.write(\"Переменная result: \"+ result +\"<br>\");\nПеременная result будет равна \"Привет!\". Постфиксный инкремент myVar++ сработает после вычисления выражения, а префиксный инкремент ++myVar не будет выполнен, так как ранее оператор || обнаружит истину."
		},
		{
			"abzac": "Оператор && (И)",
			"textAbzac": "Вычисления слево направо, если аргумент — false, оператор && возвращает его и заканчивает вычисления. Иначе — вычисляет дальше, если false в списке нет, возвращает последний правый аргумент, а он будет true.\n\nВот пример:\n\nvar myVar = 10;\nvar myBool = true;\nvar myStr = \"\";\t// тут false\nvar myMsg = \"Привет!\";\nvar result = (myVar && myVar++ && myBool && myStr && myMsg && ++myVar);\ndocument.write(\"Переменная result: \"+ result +\"<br>\");\nВычисления остановятся на переменной myStr, именно её значение \"\" и будет присвоено в переменную result."
		},
		{
			"abzac": "&& вместо if",
			"textAbzac": "В простых случаях можно использовать оператор && вместо инструкции if:\n\nvar myVar = 10;\n(myVar > 2) && document.write(\"Переменная myVar больше 2.\");\nВ этом примере правый операнд выполнится только в том случае, если левый имеет логический тип истина.\n\nТакая запись плохо читаема, рекомендуется использовать конструкцию JavaScript: if и else."
		},
		{
			"abzac": "Оператор запятая ',' в JavaScript",
			"textAbzac": "В языке JavaScript запята является бинарным оператором.\n\nСинтаксис:\n\nвыражение 1, выражение 2.\nОператор вычесляет значение левого операнда (выражение 1), затем вычисляет значение правого операнда (выражение 2) и возвращает значение правого операнда.\n\nvar msg = (11, 25);\nalert(msg); // вернёт 25.\n// var msg = (11-3), (10+2); // так не работает.\nvar msg = ((11-3), (10+2));\nalert(msg); // вернёт 12.\nКонечно, этот полностью абстрактные примеры.\n\nСкобки (...) обязательны, поскольку иначе запятая станет частью инструкции объявления var."
		}
	]
}